customValidator = module.exports = {
    isAmount: function(value) {
        if (!value.match(/^[0-9,\.]*$/)) {
            return false;
        }
        return true;
    },
    below_el: function(value) {
        return (value <= 50000);
    },
    below_gas: function(value) {
        return parseInt(value) <= 150000;
    },
    isZipCode: function(value) {
        return helpers.in_array(value,["1000", "1020", "1030", "1040", "1050", "1060", "1070", "1080", "1081", "1082", "1083", "1090", "1120", "1130", "1140", "1150", "1160", "1170", "1180", "1190", "1200", "1210", "1300", "1301", "1310", "1315", "1320", "1325", "1330", "1331", "1332", "1340", "1341", "1342", "1348", "1350", "1357", "1360", "1367", "1370", "1380", "1390", "1400", "1401", "1402", "1404", "1410", "1420", "1421", "1428", "1430", "1435", "1440", "1450", "1457", "1460", "1461", "1470", "1471", "1472", "1473", "1474", "1476", "1480", "1490", "1495", "1500", "1501", "1502", "1540", "1541", "1547", "1560", "1570", "1600", "1601", "1602", "1620", "1630", "1640", "1650", "1651", "1652", "1653", "1654", "1670", "1671", "1673", "1674", "1700", "1701", "1702", "1703", "1730", "1731", "1740", "1741", "1742", "1745", "1750", "1755", "1760", "1761", "1770", "1780", "1785", "1790", "1800", "1820", "1830", "1831", "1840", "1850", "1851", "1852", "1853", "1860", "1861", "1880", "1910", "1930", "1932", "1933", "1950", "1970", "1980", "1981", "1982", "2000", "2018", "2020", "2030", "2030", "2040", "2040", "2050", "2060", "2070", "2100", "2110", "2140", "2150", "2160", "2170", "2180", "2200", "2220", "2221", "2222", "2223", "2230", "2235", "2240", "2242", "2243", "2250", "2260", "2270", "2275", "2280", "2288", "2290", "2300", "2310", "2320", "2321", "2322", "2323", "2328", "2330", "2340", "2350", "2360", "2370", "2380", "2381", "2382", "2387", "2390", "2400", "2430", "2431", "2440", "2450", "2460", "2470", "2480", "2490", "2491", "2500", "2520", "2530", "2531", "2540", "2547", "2550", "2560", "2570", "2580", "2590", "2600", "2610", "2620", "2627", "2630", "2640", "2650", "2660", "2800", "2801", "2811", "2812", "2820", "2830", "2840", "2845", "2850", "2860", "2861", "2870", "2880", "2890", "2900", "2910", "2920", "2930", "2940", "2950", "2950", "2960", "2970", "2980", "2990", "3000", "3001", "3010", "3012", "3018", "3020", "3040", "3050", "3051", "3052", "3053", "3054", "3060", "3061", "3070", "3071", "3078", "3080", "3090", "3110", "3111", "3118", "3120", "3128", "3130", "3140", "3150", "3190", "3191", "3200", "3201", "3202", "3210", "3211", "3212", "3220", "3221", "3270", "3271", "3272", "3290", "3293", "3294", "3300", "3320", "3321", "3350", "3360", "3370", "3380", "3381", "3384", "3390", "3391", "3400", "3401", "3404", "3440", "3450", "3454", "3460", "3461", "3470", "3471", "3472", "3473", "3500", "3501", "3510", "3511", "3512", "3520", "3530", "3540", "3545", "3550", "3560", "3570", "3580", "3581", "3582", "3583", "3590", "3600", "3620", "3621", "3630", "3631", "3640", "3650", "3660", "3665", "3668", "3670", "3680", "3690", "3700", "3717", "3720", "3721", "3722", "3723", "3724", "3730", "3732", "3740", "3742", "3746", "3770", "3790", "3791", "3792", "3793", "3798", "3800", "3803", "3806", "3830", "3831", "3832", "3840", "3850", "3870", "3890", "3891", "3900", "3910", "3920", "3930", "3940", "3941", "3945", "3950", "3960", "3970", "3971", "3980", "3990", "4000", "4020", "4030", "4031", "4032", "4040", "4041", "4042", "4050", "4051", "4052", "4053", "4100", "4101", "4102", "4120", "4121", "4122", "4130", "4140", "4141", "4160", "4161", "4162", "4163", "4170", "4171", "4180", "4181", "4190", "4210", "4217", "4218", "4219", "4250", "4252", "4253", "4254", "4257", "4260", "4261", "4263", "4280", "4287", "4300", "4317", "4340", "4342", "4347", "4350", "4351", "4357", "4360", "4367", "4400", "4420", "4430", "4431", "4432", "4450", "4451", "4452", "4453", "4458", "4460", "4470", "4480", "4500", "4520", "4530", "4537", "4540", "4550", "4557", "4560", "4570", "4577", "4590", "4600", "4601", "4602", "4606", "4607", "4608", "4610", "4620", "4621", "4623", "4624", "4630", "4631", "4632", "4633", "4650", "4651", "4652", "4653", "4654", "4670", "4671", "4672", "4680", "4681", "4682", "4683", "4684", "4690", "4700", "4701", "4710", "4711", "4720", "4721", "4728", "4730", "4731", "4750", "4760", "4761", "4770", "4771", "4780", "4782", "4783", "4784", "4790", "4791", "4800", "4801", "4802", "4820", "4821", "4830", "4831", "4834", "4837", "4840", "4841", "4845", "4850", "4851", "4852", "4860", "4861", "4870", "4877", "4880", "4890", "4900", "4910", "4920", "4950", "4960", "4970", "4980", "4983", "4987", "4990", "5000", "5001", "5002", "5003", "5004", "5020", "5021", "5022", "5024", "5030", "5031", "5032", "5060", "5070", "5080", "5081", "5100", "5101", "5140", "5150", "5170", "5190", "5300", "5310", "5330", "5332", "5333", "5334", "5336", "5340", "5350", "5351", "5352", "5353", "5354", "5360", "5361", "5362", "5363", "5364", "5370", "5372", "5374", "5376", "5377", "5380", "5500", "5501", "5502", "5503", "5504", "5520", "5521", "5522", "5523", "5524", "5530", "5537", "5540", "5541", "5542", "5543", "5544", "5550", "5555", "5560", "5561", "5562", "5563", "5564", "5570", "5571", "5572", "5573", "5574", "5575", "5576", "5580", "5590", "5600", "5620", "5621", "5630", "5640", "5641", "5644", "5646", "5650", "5651", "5660", "5660", "5670", "5680", "6000", "6001", "6010", "6020", "6030", "6031", "6032", "6040", "6041", "6042", "6043", "6044", "6060", "6061", "6110", "6111", "6120", "6140", "6141", "6142", "6150", "6180", "6181", "6182", "6183", "6200", "6210", "6211", "6220", "6221", "6222", "6223", "6224", "6230", "6238", "6240", "6250", "6280", "6440", "6441", "6460", "6461", "6462", "6463", "6464", "6470", "6500", "6511", "6530", "6531", "6532", "6533", "6534", "6536", "6540", "6542", "6543", "6560", "6567", "6590", "6591", "6592", "6593", "6594", "6596", "6600", "6630", "6637", "6640", "6642", "6660", "6661", "6662", "6663", "6666", "6670", "6671", "6672", "6673", "6674", "6680", "6681", "6686", "6687", "6688", "6690", "6692", "6698", "6700", "6704", "6706", "6717", "6720", "6721", "6723", "6724", "6730", "6740", "6741", "6742", "6743", "6747", "6750", "6760", "6761", "6762", "6767", "6769", "6780", "6781", "6782", "6790", "6791", "6792", "6800", "6810", "6811", "6812", "6813", "6820", "6821", "6823", "6824", "6830", "6831", "6832", "6833", "6834", "6836", "6838", "6840", "6850", "6851", "6852", "6853", "6856", "6860", "6870", "6880", "6887", "6890", "6900", "6920", "6921", "6922", "6924", "6927", "6929", "6940", "6941", "6950", "6951", "6952", "6953", "6960", "6970", "6971", "6972", "6980", "6982", "6983", "6984", "6986", "6987", "6990", "6997", "7000", "7011", "7012", "7020", "7021", "7022", "7024", "7030", "7031", "7032", "7033", "7034", "7040", "7041", "7050", "7060", "7061", "7062", "7063", "7070", "7080", "7090", "7100", "7110", "7120", "7130", "7131", "7133", "7134", "7140", "7141", "7160", "7170", "7180", "7181", "7190", "7191", "7300", "7301", "7320", "7321", "7322", "7330", "7331", "7332", "7333", "7334", "7340", "7350", "7370", "7380", "7382", "7387", "7390", "7500", "7501", "7502", "7503", "7504", "7506", "7520", "7521", "7522", "7530", "7531", "7532", "7533", "7534", "7536", "7538", "7540", "7542", "7543", "7548", "7600", "7601", "7602", "7603", "7604", "7608", "7610", "7611", "7618", "7620", "7621", "7622", "7623", "7624", "7640", "7641", "7642", "7643", "7700", "7711", "7712", "7730", "7740", "7742", "7743", "7750", "7760", "7760", "7780", "7781", "7782", "7783", "7784", "7800", "7801", "7802", "7803", "7804", "7810", "7811", "7812", "7822", "7823", "7830", "7850", "7860", "7861", "7862", "7863", "7864", "7866", "7870", "7880", "7890", "7890", "7900", "7901", "7903", "7904", "7906", "7910", "7910", "7911", "7912", "7940", "7941", "7942", "7943", "7950", "7951", "7970", "7971", "7972", "7973", "8000", "8020", "8200", "8210", "8211", "8300", "8301", "8310", "8340", "8370", "8377", "8380", "8400", "8420", "8421", "8430", "8431", "8432", "8433", "8434", "8450", "8460", "8470", "8480", "8490", "8500", "8501", "8510", "8511", "8520", "8530", "8531", "8540", "8550", "8551", "8552", "8553", "8554", "8560", "8570", "8572", "8573", "8580", "8581", "8582", "8583", "8587", "8600", "8610", "8620", "8630", "8640", "8647", "8650", "8660", "8670", "8680", "8690", "8691", "8700", "8710", "8720", "8730", "8740", "8750", "8755", "8760", "8770", "8780", "8790", "8791", "8792", "8793", "8800", "8810", "8820", "8830", "8840", "8850", "8851", "8860", "8870", "8880", "8890", "8900", "8902", "8904", "8906", "8908", "8920", "8930", "8940", "8950", "8951", "8952", "8953", "8954", "8956", "8957", "8958", "8970", "8972", "8978", "8980", "9000", "9030", "9031", "9032", "9040", "9041", "9042", "9050", "9051", "9052", "9060", "9070", "9080", "9090", "9100", "9111", "9112", "9120", "9130", "9140", "9150", "9160", "9170", "9180", "9185", "9190", "9200", "9220", "9230", "9240", "9250", "9255", "9260", "9270", "9280", "9290", "9300", "9308", "9310", "9320", "9340", "9400", "9401", "9402", "9403", "9404", "9406", "9420", "9450", "9451", "9470", "9472", "9473", "9500", "9506", "9520", "9521", "9550", "9551", "9552", "9570", "9571", "9572", "9600", "9620", "9630", "9636", "9660", "9661", "9667", "9680", "9681", "9688", "9690", "9700", "9750", "9770", "9771", "9772", "9790", "9800", "9810", "9820", "9830", "9831", "9840", "9850", "9860", "9870", "9880", "9881", "9890", "9900", "9910", "9920", "9921", "9930", "9931", "9932", "9940", "9950", "9960", "9961", "9968", "9970", "9971", "9980", "9981", "9982", "9988", "9990", "9991", "9992"]); 
    },
	is_be_phone: function(value){
		if(value.match(/^((\+|00)32|0)[1-9]{1}\d{7,8}$/) != null)
			return true;
		return false;
    },
    is_ean: function(value) {
        if (value.length == 0) return true;
        var ean = helpers.trim(helpers.str_replace(' ', '', value).toLowerCase());

        if (!helpers.isNumber(value) || ean.length != 18 || ean.substr(0, 4) != '5414') {
            return false;
        }

        var result = 0;
        for (var index = 0; index < ean.length - 1; index++) {
            if (index % 2 == 0) 
                result = result + 3 * parseInt(ean[index]);
            else
                result = result + parseInt(ean[index]);
        }

        var mod = result % 10;
        var check_digit = 10 - mod;
        if (check_digit == 10) check_digit = 0;

        if (parseInt(ean[ean.length - 1]) != check_digit) {
            return false;
        } else
            return true;
    },
    is_rrn: function(value) {
        if (value.length == 0) return true;
        if(value.match(/^[0-9]{2}\.?[0-9]{2}\.?[0-9]{2}\-?[0-9]{3}\.?[0-9]{2}$/) == null)
            return false;
        value = value.replace(/\D/g,'');
        var check = value.substr(value.length - 2);
        var principal = value.substr(0, value.length - 2);

        if ( 97 - (parseInt(principal) % 97) != check ) {
            principal = '2' + principal.toString();
            if ( 97 - (parseInt(principal) % 97) != check ) {
                return false;
            }
        }
        return true;
    },
    is_iban: function(value) {
        if (value.length == 0) return true;
        var iban = helpers.trim(helpers.str_replace(' ', '', value).toLowerCase());
        var countries = {
            al:28,ad:24,at:20,az:28,bh:22,be:16,ba:20,br:29,bg:22,cr:21,hr:21,cy:28,cz:24,dk:18,do:28,ee:20,fo:18,fi:18,fr:27,ge:22,de:22,gi:23,gr:27,gl:18,gt:28,hu:28,is:26,ie:22,il:23,it:27,jo:30,kz:20,kw:30,lv:21,lb:28,li:21,lt:20,lu:20,mk:19,mt:31,mr:27,mu:30,mc:27,md:24,me:22,nl:18,no:15,pk:24,ps:29,pl:28,pt:25,qa:29,ro:24,sm:27,sa:24,rs:22,sk:24,si:19,es:24,se:24,ch:21,tn:24,tr:26,ae:23,gb:22,vg:24
        }
        var chars = {
            a:10,b:11,c:12,d:13,e:14,f:15,g:16,h:17,i:18,j:19,k:20,l:21,m:22,n:23,o:24,p:25,q:26,r:27,s:28,t:29,u:30,v:31,w:32,x:33,y:34,z:35
        }
        if (iban.substr(0, 2) != "be") {
            return false;
        }

        if (iban.length == countries[iban.substr(0, 2)]) {
            var movedchar = iban.substr(4) + iban.substr(0, 4);
            var movedchar_array = helpers.str_split(movedchar);
            var new_string = "";
            for (var index = 0; index < movedchar_array.length; index++) {
                var element = movedchar_array[index];
                if (!helpers.isNumber(element)) {
                    movedchar_array[index] = chars[element];
                }
                new_string += movedchar_array[index].toString();
            }
            if (helpers.bcmod(new_string, '97') == 1) return true;
            else {
                return false;
            }
        } else {
            return false;
        }
    },
    is_natural: function(value) {
        return true;
    }
}